---
import type1 from '../data/type1-verbs.json';
import type2 from '../data/type2-verbs.json';
import type3 from '../data/type3-verb.json';
import type4 from '../data/type4-verb.json';
import type5 from '../data/type5-verb.json';
import type6 from '../data/type6-verb.json';

const allVerbs = [...type1, ...type2, ...type3, ...type4, ...type5, ...type6];
const current = allVerbs[Math.floor(Math.random() * allVerbs.length)];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="google" content="notranslate" />
    <title>Finnish Flashcards</title>
    <style>
      body {
        font-family: system-ui, -apple-system, sans-serif;
        text-align: center;
        padding: 2rem;
        margin: 0;
        background-color: #fff;
      }

      h1 {
        margin-bottom: 0.5rem;
      }

      .card {
        width: 300px;
        height: 200px;
        margin: 2rem auto;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid #000;
        border-radius: 1rem;
        cursor: pointer;
        font-size: 1.5rem;
        transition: background 0.3s;
        background: #fff;
      }

      button {
        display: block;
        margin: 1rem auto 2rem;
        padding: 0.6rem 1.8rem;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        border: none;
        border-radius: 0.5rem;
        background-color: #000;
        color: #fff;
        transition: background 0.3s;
      }

      button:hover {
        background-color: #333;
      }

      label,
      select {
        font-size: 1rem;
        vertical-align: middle;
      }

      select {
        padding: 0.3rem 0.5rem;
        border-radius: 0.4rem;
        border: 1px solid #ccc;
        margin-right: 1rem;
      }

      input[type='checkbox'] {
        transform: scale(1.2);
        margin-left: 0.5rem;
        margin-right: 0.5rem;
      }
    </style>
  </head>
  <body>
    <h1>Finnish Flashcards</h1>
    <p style="max-width: 600px; margin: 0 auto 2rem; font-size: 1.1rem;">
      Welcome to learning Finnish with flashcards. Tap the card to reveal its meaning and the root of the word. Click
      "Next" to test another word.
    </p>

    <div
      style="margin: 2rem auto; max-width: 600px; display: flex; justify-content: center; gap: 3rem; align-items: flex-start;"
    >
      <!-- Verb type select -->
      <div style="display: flex; flex-direction: column;">
        <label for="verbtype" style="font-size: 1rem; margin-bottom: 0.4rem;">Select Finnish Verb Type:</label>
        <select
          id="verbtype"
          style="padding: 0.4rem; font-size: 1rem; border-radius: 0.4rem; border: 1px solid #ccc;"
        >
          <option value="all">All</option>
          <option value="type1">Type 1</option>
          <option value="type2">Type 2</option>
          <option value="type3">Type 3</option>
          <option value="type4">Type 4</option>
          <option value="type5">Type 5</option>
          <option value="type6">Type 6</option>
        </select>
      </div>

      <!-- KPT toggle -->
      <div style="display: flex; flex-direction: column;">
        <label style="font-size: 1rem; margin-bottom: 0.4rem;" for="kpt-toggle">Only Show Verbs without KPT</label>
        <div style="display: flex; align-items: center;">
          <input type="checkbox" id="kpt-toggle" style="transform: scale(1.2); margin-right: 0.5rem;" />
          <span style="font-size: 1rem;">Enable</span>
        </div>
      </div>
    </div>

    <div
      id="card"
      class="card"
      data-finnish={current.finnish}
      data-english={current.english}
      data-stem={current.stem}
    >
      {current.finnish}
    </div>

    <button id="next-btn">Next</button>

    <div
      id="conjugation"
      style="
        display: none;
        margin: 2rem auto;
        max-width: 320px;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 0.75rem;
        background-color: #f9f9f9;
      "
    >
      <h2 style="margin-top: 0; font-size: 1.25rem;">Conjugation</h2>
      <div id="conjugation-text" style="font-size: 1.05rem; text-align: left; line-height: 1.6;"></div>
    </div>

    <div
      id="verbtype-info"
      style="
        display: none;
        margin: 2rem auto;
        max-width: 320px;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 0.75rem;
        background-color: #eef4ff;
        font-size: 0.95rem;
        line-height: 1.5;
        text-align: left;
      "
    ></div>

    <script type="application/json" id="card-data" set:html={JSON.stringify(allVerbs)}></script>

    <script type="module">
      console.log("Script loaded!");

      function getFilteredVerbs() {
        const selectedType = verbtypeSelect.value;
        const kptOnly = kptToggle.checked;

        return allCards.filter((v) => {
          const typeMatch = selectedType === 'all' || v.type === selectedType;
          const kptMatch = !kptOnly || v.kpt === 'no';
          return typeMatch && kptMatch;
        });
      }

      const card = document.getElementById('card');
      const nextBtn = document.getElementById('next-btn');
      const conjugationBox = document.getElementById('conjugation');
      const conjugationText = document.getElementById('conjugation-text');
      const verbtypeInfo = document.getElementById('verbtype-info');
      const verbtypeSelect = document.getElementById('verbtype');
      const kptToggle = document.getElementById('kpt-toggle');
      const allCards = JSON.parse(document.getElementById('card-data').textContent);
      let current = allCards[Math.floor(Math.random() * allCards.length)];
      let queue = shuffle(getFilteredVerbs());

      verbtypeSelect.addEventListener('change', () => {
        queue = shuffle(getFilteredVerbs());
        console.log('Filtered verb count:', getFilteredVerbs().length);
      });

      kptToggle.addEventListener('change', () => {
        queue = shuffle(getFilteredVerbs());
        console.log('Filtered verb count:', getFilteredVerbs().length);
      });

      let flipped = false;

      function shuffle(array) {
        const copy = [...array];
        for (let i = copy.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [copy[i], copy[j]] = [copy[j], copy[i]];
        }
        return copy;
      }

      function renderCard() {
        card.dataset.finnish = current.finnish;
        card.dataset.english = current.english;
        card.dataset.stem = current.stem;
        card.textContent = current.finnish;
        flipped = false;
        conjugationBox.style.display = 'none';
        verbtypeInfo.style.display = 'none';
        verbtypeInfo.innerHTML = '';
      }

      card.addEventListener('click', () => {
        console.log('Card clicked!');
        if (!flipped) {
          card.textContent = `${card.dataset.english} — Root: ${card.dataset.stem}`;

          conjugationText.innerHTML = `
            <div><strong>Original Verb:</strong> ${current.finnish}</div><br />
            <div><strong>KPT applied:</strong> ${current.kpt}</div><br />
            <div>minä ${current.conjugation.mina}</div>
            <div>sinä ${current.conjugation.sina}</div>
            <div>hän ${current.conjugation.han}</div>
            <div>me ${current.conjugation.me}</div>
            <div>te ${current.conjugation.te}</div>
            <div>he ${current.conjugation.he}</div>
          `;

          conjugationBox.style.display = 'block';

          let verbType = current.type;

          if (verbType === 'type1') {
            verbtypeInfo.innerHTML = `
              <strong>Type 1 Verb Rule</strong><br />
              Verbs in this group end in two vowels:<br />
              <code>-aa, -ea, -eä, -ia, -iä, -oa, -ua, -yä, -ää, -öä</code>.<br />
              To form the stem, remove the final <code>-a</code> or <code>-ä</code> from the infinitive.<br /><br />

              <strong>KPT (Consonant Gradation)</strong><br />
              Type 1 verbs follow <em>strong → weak</em> consonant gradation in conjugated forms:<br />
              <code>kk → k</code> (nukkua → minä nukun)<br />
              <code>pp → p</code> (tappaa → minä tapan)<br />
              <code>tt → t</code> (soittaa → minä soitan)<br />
              <code>nt → nn</code> (antaa → minä annan)<br />
              <code>nk → ng</code> (tinkiä → minä tingin)<br />
              <code>mp → mm</code> (ampua → minä ammun)<br />
              <code>lt → ll</code> (kieltää → minä kiellän)<br />
              <code>rt → rr</code> (kiertää → minä kierrän)<br />
              <code>t → d</code> (tietää → minä tiedän)<br />
              <code>k → Ø</code> (lukea → minä luen)<br />
              <code>p → v</code> (sopia → minä sovin)<br />
              <code>lke → lje</code> (sulkea → minä suljen)<br />
              <code>rke → rje</code> (särkeä → minä särjen)<br /><br />
            `;
            verbtypeInfo.style.display = 'block';
          } else if (verbType === 'type2') {
            verbtypeInfo.innerHTML = `
              <strong>Type 2 Verb Rule</strong><br />
              Verbs in this type end in <code>-da/-dä</code>.<br />
              To find the stem, remove the final <code>-da/-dä</code>.<br /><br />

              <strong>Note:</strong><br />
              The third person singular (<em>hän</em>) form does <em>not</em> involve doubling the final consonant — unlike Type 1 verbs.<br /><br />

              <strong>KPT (Consonant Gradation)</strong><br />
              Type 2 verbs generally do not use KPT.<br />
              The only exceptions are <code>tehdä</code> and <code>nähdä</code>, which follow Type 1 gradation patterns:<br />
              <code>tehdä → teen, teet, tekee</code><br />
              <code>nähdä → näen, näet, näkee</code><br /><br />
            `;
            verbtypeInfo.style.display = 'block';
          } else if (verbType === 'type3') {
            verbtypeInfo.innerHTML = `
              <strong>Type 3 Verb Rule</strong><br />
              Verbs in this type end in <code>-lla/-llä, -nna/-nnä, -rra/-rrä, -sta/-stä</code> — two consonants + a vowel.<br />
              Remove the final syllable <code>-la/-lä, -na/-nä, -ra/-rä, -ta/-tä</code> to get the stem.<br />
              Then add <code>-e</code> before personal endings.<br /><br />

              <strong>KPT (Reverse Gradation)</strong><br />
              If KPT is found, apply reverse KPT to the stem. No exceptions for <em>hän</em> or <em>he</em> with Type 3 Reverse KPT.<br />
              These follow reverse gradation (weak → strong):<br />
              <code>k → kk</code> (nakella → minä nakkelen)<br />
              <code>t → tt</code> (ajatella → minä ajattelen)<br />
              <code>p → pp</code> (tapella → minä tappelen)<br />
              <code>mm → mp</code> (ommella → minä ompelen)<br />
              <code>nn → nt</code> (juoksennella → minä juoksentelen)<br />
              <code>ng → nk</code> (rangaista → minä rankaisen)<br />
              <code>ll → lt</code> (jokellella → minä jokeltelen)<br />
              <code>rr → rt</code> (imarrella → minä imartelen)<br />
              <code>d → t</code> (riidellä → minä riitelen)<br />
              <code>Ø → k</code> (jaella → minä jakelen)<br />
            `;
            verbtypeInfo.style.display = 'block';
          } else if (verbType === 'type4') {
            verbtypeInfo.innerHTML = `
              <strong>Type 4 Verb Rule</strong><br />
              Verbs in this type end in <code>-ata/-ätä, -ota/-ötä, -uta/-ytä</code>.<br />
              To find the stem, remove the <code>-t</code> (but not the final <code>-a/-ä</code>).<br />

              <strong>Note: hän</strong><br />
              Add <code>-a</code> to the stem if the final two vowels are different (e.g., <code>hän halua + a → haluaa</code>).<br />
              If the stem ends in <code>-aa</code> (e.g., <code>osaa</code>), no extra vowel is added (<code>hän osaa</code>).<br /><br />

              <strong>KPT (Reverse Gradation)</strong><br />
              Type 4 verbs can apply consonant gradation (weak → strong):<br />
              <code>k → kk</code> (pakata → minä pakkaan)<br />
              <code>p → pp</code> (hypätä → minä hyppään)<br />
              <code>t → tt</code> (mitata → minä mittaan)<br />
              <code>nn → nt</code> (suunnata → minä suuntaan)<br />
              <code>ng → nk</code> (hangata → minä hankaan)<br />
              <code>mm → mp</code> (kammata → minä kampaan)<br />
              <code>ll → lt</code> (vallata → minä valtaan)<br />
              <code>rr → rt</code> (kerrata → minä kertaan)<br />
              <code>d → t</code> (pudota → minä putoan)<br />
              <code>Ø → k</code> (maata → minä makaan)<br />
              <code>v → p</code> (tavata → minä tapaan)<br /><br />
            `;
            verbtypeInfo.style.display = 'block';
          } else if (verbType === 'type5') {
            verbtypeInfo.innerHTML = `
              <strong>Type 5 Verb Rule</strong><br />
              Verbs in this type end in <code>-ita/-itä</code>.<br />
              To form the stem, remove the entire <code>-ita/-itä</code> ending (including the <code>-i-</code>).<br />
              Then add <code>-itse</code> before attaching personal endings.<br /><br />

              <strong>Note:</strong><br />
              Type 5 verbs do <em>not</em> use KPT (consonant gradation).<br /><br />
            `;
            verbtypeInfo.style.display = 'block';
          } else if (verbType === 'type6') {
            verbtypeInfo.innerHTML = `
              <strong>Type 6 Verb Rule</strong><br />
              Verbs in this type end in <code>-eta/-etä</code>.<br />
              To find the stem, remove the final <code>-ta/-tä</code>.<br />
              Then add <code>-ne</code> before attaching the personal endings.<br /><br />

              <strong>KPT (Consonant Gradation)</strong><br />
              KPT applies in many Type 6 verbs and follows these weak → strong transformations:<br />
              <code>k → kk</code> (heiketä → minä heikkenen)<br />
              <code>p → pp</code> (hapata → minä happanen)<br />
              <code>t → tt</code> (loitota → minä loittonen)<br />
              <code>nn → nt</code> (kiinnetä → minä kiintenen)<br />
              <code>mm → mp</code> (lämmetä → minä lämpenen)<br />
              <code>d → t</code> (pidetä → minä pitenen)<br />
              <code>Ø → k</code> (paeta → minä pakenen)<br />
              <code>v → p</code> (kalveta → minä kalpenen)<br />
              <code>lje → lke</code> (valjeta → minä valkenen)<br />
              <code>hje → hke</code> (rohjeta → minä rohkenen)<br />
              <code>rje → rke</code> (tarjeta → minä tarkenen)<br /><br />
            `;
            verbtypeInfo.style.display = 'block';
          }
        } else {
          card.textContent = card.dataset.finnish;
        }

        flipped = !flipped;
      });

      nextBtn.addEventListener('click', () => {
        if (queue.length === 0) {
          queue = shuffle(getFilteredVerbs());
        }

        current = queue.pop();
        renderCard();
      });

      renderCard();
    </script>
  </body>
</html>
